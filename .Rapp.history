as.factor("a")
as.factor("a","b")
as.factor(c("a","b"))
rss.df.filtered
rss.df.filtered[1,]
library(tm)
corpus = Corpus(VectorSource(rss.df.filtered$description))
corpus = tm_map(corpus,content_transformer(tolower))#
corpus = tm_map(corpus,content_transformer(removePunctuation))#
corpus = tm_map(corpus,content_transformer(removeNumbers))#
corpus = tm_map(corpus,removeWords,stopwords("english"))#
corpus = tm_map(corpus,stemDocument)
dtm = TermDocumentMatrix(corpus, control = list(minWordLength = 1))#
dtmSparse = removeSparseTerms(dtm,0.9)#
dfSparse = as.data.frame(inspect(dtmSparse))#
scaleSparse = scale(dfSparse)#
distSparse = dist(scaleSparse, method = "euclidean")#
clustSparse = hclust(distSparse, method="ward")
plot(clustSparse)
findFreqTerms(dtm)
findFreqTerms(dtm,lowfreq=10)
findAssocs(dtm,"usd",0.3)
findAssocs(dtm,"usd",0.5)
findAssocs(dtm,"aud",0.5)
findAssocs(dtm,"australia",0.5)
findAssocs(dtm,"cad",0.5)
findAssocs(dtm,"canada",0.5)
findAssocs(dtm,"euro",0.5)
findAssocs(dtm,"eur",0.5)
corpus = Corpus(VectorSource(rss.df.filtered$description))
corpus = Corpus(VectorSource(c(rss.df.filtered$description,rss.df.filtered$title))
)
inspect(corpus)
corpus = tm_map(corpus,content_transformer(tolower))#
corpus = tm_map(corpus,content_transformer(removePunctuation))#
#corpus = tm_map(corpus,content_transformer(removeNumbers))#
corpus = tm_map(corpus,removeWords,stopwords("english"))#
#corpus = tm_map(corpus,stemDocument)
dtm = TermDocumentMatrix(corpus, control = list(minWordLength = 1))#
dtmSparse = removeSparseTerms(dtm,0.9)#
dfSparse = as.data.frame(inspect(dtmSparse))#
scaleSparse = scale(dfSparse)#
distSparse = dist(scaleSparse, method = "euclidean")#
clustSparse = hclust(distSparse, method="ward")
plot(clustSparse)
findAssocs(dtm,"usd",0.5)
corpus = Corpus(VectorSource(c(rss.df.filtered$description,rss.df.filtered$title))
)
corpus = tm_map(corpus,content_transformer(tolower))#
corpus = tm_map(corpus,content_transformer(removePunctuation))#
corpus = tm_map(corpus,content_transformer(removeNumbers))#
corpus = tm_map(corpus,removeWords,stopwords("english"))#
#corpus = tm_map(corpus,stemDocument)
dtm = TermDocumentMatrix(corpus, control = list(minWordLength = 1))#
dtmSparse = removeSparseTerms(dtm,0.9)#
dfSparse = as.data.frame(inspect(dtmSparse))#
scaleSparse = scale(dfSparse)#
distSparse = dist(scaleSparse, method = "euclidean")#
clustSparse = hclust(distSparse, method="ward")
findAssocs(dtm,"usd",0.5)
findAssocs(dtm,"loonie",0.5)
findAssocs(dtm,"cad",0.5)
findAssocs(dtm,"aud",0.5)
findAssocs(dtm,"australia",0.5)
findAssocs(dtm,"canada",0.5)
kmeans(rss.df.filtered)
kmeans(rss.df.filtered,5)
matrix(rss.df.filtered)
summary(rss.df.filtered)
findAssocs(dtm,"USD")
findAssocs(dtm,"USD",0.)
findAssocs(dtm,"USD",0.5)
findAssocs(dtm,"USD",0.3)
findAssocs(dtm,"usd",0.3)
findAssocs(dtm,"usd",0.5)
findFreqTerms(dtm,0.9)
findFreqTerms(dtm,lowfreq=0.9)
findFreqTerms(dtm,lowfreq=0.3)
findFreqTerms(dtm,lowfreq=0.2)
findFreqTerms(dtm,lowfreq=0.99)
findFreqTerms(dtm,lowfreq=20)
findAssocs(dtm,"gold",0.5)
findAssocs(dtm,"gold",0.3)
findAssocs(dtm,"ukranian",0.3)
findAssocs(dtm,"conflict",0.3)
opts = commandArgs(trailingOnly = TRUE)
opts
exists("opts")
length(opts)
getwd()
setwd("/Users/macbook/workspace/nico/aifx/server/scripts")
source("strategy.r")
ls()
out
tmp
ls()
patterns
ls()
rm(list=ls())
getwd()
setwd("/Users/macbook/workspace/nico/aifx")
source("server/scripts/strategy.r")
source("server/scripts/strategy.r")
source("server/scripts/strategy.r")
ls()
trend
out
ls()
dirname(sys.frame(1)$ofile)
sys.frame()
rm(list=ls())
getwd()
source("server/scripts/strategy.r")
rm(list=ls())
source("server/scripts/strategy.r")
ls()
sys.frame()
class(sys.frame())
class(sys.frame(0))
class(sys.frame(1))
sys.frame(1)|NULL
sys.frames
sys.frames()
rm(list=ls())
source("server/scripts/strategy.r")
ls()
rm(list=ls())
source("server/scripts/strategy.r")
getSignals()
rm(list=ls())
source("server/scripts/strategy.r")
getSignals(out)
cbind(out,c("a"=1))
cbind(out,list("a"=1))
?cbind
class(out)
getSignals(out)
tmp = cbind(out, CCI(HLC(data),n=7))#
  tmp = cbind(tmp, MACD(Cl(tmp),4,5,5,maType=list(list(EMA),list(EMA),list(SMA))))#
  buysell = apply(tmp, 1, function(x){if(is.na(x["cci"])|is.na(x["macd"])|is.na(x["signal"])){x["buysell"]=0}else if(x["cci"]>100 & x["macd"]>0 & x["signal"]>0){x["buysell"]=1}else if(x["cci"]<(-100) & x["macd"]<0 & x["signal"]<0){x["buysell"]=-1}else{x["buysell"]=0}})
tmp = cbind(out, CCI(HLC(out),n=7))#
  tmp = cbind(tmp, MACD(Cl(tmp),4,5,5,maType=list(list(EMA),list(EMA),list(SMA))))#
  buysell = apply(tmp, 1, function(x){if(is.na(x["cci"])|is.na(x["macd"])|is.na(x["signal"])){x["buysell"]=0}else if(x["cci"]>100 & x["macd"]>0 & x["signal"]>0){x["buysell"]=1}else if(x["cci"]<(-100) & x["macd"]<0 & x["signal"]<0){x["buysell"]=-1}else{x["buysell"]=0}})
tmp
buysell
names(buysell)
as.xts(buysell)
names(as.xts(buysell))
colnames(as.xts(buysell))
cbind(out,as.xts(buysell))
tmp = as.xts(buysell)
tmp
names(tmp) = c("CCI+MACD")
tmp
rm(list=ls())
source("server/scripts/strategy.r")
getSignals(out)
rm(list=ls())
source("server/scripts/strategy.r")
getSignals(out)
rm(list=ls())
source("server/scripts/strategy.r")
rm(list=ls())
source("server/scripts/strategy.r")
opts
rm(list=ls())
source("server/scripts/strategy.r")
rm(list=ls())
source("server/scripts/strategy.r")
getSignals(out)
rm(list=ls())
source("server/scripts/strategy.r")
rm(list=ls())
source("server/scripts/strategy.r")
getSignals(out)
search("stoch")
help.search("stoch")
?EMA
EMA(Cl(out),10)
CCI(HLC(out),n=7)
rm(list=ls())
source("server/scripts/strategy.r")
trainStrategy(data=out,strategy="EMA")
trainStrategy(data=out,strategy="EMA")dim(out)
dim(out)
rm(list=ls())
source("server/scripts/strategy.r")
trainStrategy(data=out,strategy="EMA")dim(out)
trainStrategy(data=out,strategy="EMA")
rm(list=ls())
source("server/scripts/strategy.r")
trainStrategy(data=out,strategy="EMA")
rm(list=ls())
source("server/scripts/strategy.r")
trainStrategy(data=out,strategy="EMA")
trainStrategy <- function(data=NA, instrument,granularity,strategy){#
  data = ifelse(is.na(data),getCandles(instrument,granularity,count=600),data)#
  print(data)#
  startDate = index(data[1,])#
  ##endDate = index(data[ceiling(nrow(data)/2),])#
  endDate = index(data[nrow(data),])#
  trainingData <- window(data, start =startDate, end = endDate)#
  pTab <- FindOptimumStrategy(trainingData,strategy) #pTab is the performance table of the various parameters tested#
}
trainStrategy(data=out,strategy="EMA")
out
trainStrategy(data=out,strategy="EMA")
trainStrategy <- function(data=NA, instrument,granularity,strategy){#
  data = ifelse(is.na(data),getCandles(instrument,granularity,count=600),data)#
  index(data) = index(data)#
  print(data)#
  startDate = index(data[1,])#
  ##endDate = index(data[ceiling(nrow(data)/2),])#
  endDate = index(data[nrow(data),])#
  trainingData <- window(data, start =startDate, end = endDate)#
  pTab <- FindOptimumStrategy(trainingData,strategy) #pTab is the performance table of the various parameters tested#
}
trainStrategy(data=out,strategy="EMA")
?clone
rownames(out)
colnames(out)
out
class(out)
as.xts(out)
trainStrategy <- function(data=NA, instrument,granularity,strategy){#
  data = ifelse(is.na(data),getCandles(instrument,granularity,count=600),as.xts(data))#
  startDate = index(data[1,])#
  ##endDate = index(data[ceiling(nrow(data)/2),])#
  endDate = index(data[nrow(data),])#
  trainingData <- window(data, start =startDate, end = endDate)#
  pTab <- FindOptimumStrategy(trainingData,strategy) #pTab is the performance table of the various parameters tested#
}
trainStrategy(data=out,strategy="EMA")
trainStrategy <- function(data=NA, instrument,granularity,strategy){#
  if(is.na(data)){#
    data = getCandles(instrument,granularity,count=600)#
  }#
  print(data)#
  startDate = index(data[1,])#
  ##endDate = index(data[ceiling(nrow(data)/2),])#
  endDate = index(data[nrow(data),])#
  trainingData <- window(data, start =startDate, end = endDate)#
  pTab <- FindOptimumStrategy(trainingData,strategy) #pTab is the performance table of the various parameters tested#
}
trainStrategy(data=out,strategy="EMA")
granularity
is.na(out)
out==NA
rm(list=ls())
source("server/scripts/strategy.r")
trainStrategy(data=out,strategy="EMA")
rm(list=ls())
source("server/scripts/strategy.r")
trainStrategy(data=out,strategy="EMA")
CalculatePerformanceMetric <- function(returns,metric){#
  #Get given some returns in columns#
  #Apply the function metric to the data#
  print (paste("Calculating Performance Metric:",metric))#
  metricFunction <- match.fun(metric)#
  if(length(grep("sharperatio",metric,ignore.case=T))>0){#
    periods = 252#
#
    if(length(grep("[a-z]\\d+",granularity,ignore.case=T))>0){#
      unit = gsub("([a-z])(\\d+)","\\1",granularity,ignore.case=T)#
      num = as.integer(gsub("([a-z])(\\d+)","\\1",granularity,ignore.case=T))#
      switch(unit, H={#
          periods=8760/num#
      }, M={#
          periods=525600/num  #
      })#
      if(unit=="M" & (is.na(num)|is.null(num))){#
        periods = 12#
      }#
    }#
    print(periods)#
    metricData <- as.matrix(metricFunction(returns,scale=periods))#
  }else{#
    metricData <- as.matrix(metricFunction(returns))#
  }#
  #Some functions return the data the wrong way round#
  #Hence cant label columns to need to check and transpose it#
  if(nrow(metricData) == 1){#
  metricData <- t(metricData)#
  }#
  colnames(metricData) <- metric#
  return (metricData)#
}
trainStrategy(data=out,strategy="EMA")
CalculatePerformanceMetric <- function(returns,metric){#
  #Get given some returns in columns#
  #Apply the function metric to the data#
  print (paste("Calculating Performance Metric:",metric))#
  metricFunction <- match.fun(metric)#
  if(length(grep("sharperatio",metric,ignore.case=T))>0){#
    periods = 252#
#
    if(length(grep("[a-z]\\d+",granularity,ignore.case=T))>0){#
      unit = gsub("([a-z])(\\d+)","\\1",granularity,ignore.case=T)#
      num = as.integer(gsub("([a-z])(\\d+)","\\1",granularity,ignore.case=T))#
      switch(unit, H={#
          periods=8760/num#
      }, M={#
          periods=525600/num  #
      })#
      if(unit=="M" & (is.na(num)|is.null(num))){#
        periods = 12#
      }#
    }#
    print(paste("here",periods))#
    metricData <- as.matrix(metricFunction(returns,scale=periods))#
  }else{#
    metricData <- as.matrix(metricFunction(returns))#
  }#
  #Some functions return the data the wrong way round#
  #Hence cant label columns to need to check and transpose it#
  if(nrow(metricData) == 1){#
  metricData <- t(metricData)#
  }#
  colnames(metricData) <- metric#
  return (metricData)#
}
trainStrategy(data=out,strategy="EMA")
CalculatePerformanceMetric <- function(returns,metric){#
  #Get given some returns in columns#
  #Apply the function metric to the data#
  print (paste("Calculating Performance Metric:",metric))#
  metricFunction <- match.fun(metric)#
  if(length(grep("sharperatio",metric,ignore.case=T))>0){#
    periods = 252#
#
    if(length(grep("[a-z]\\d+",granularity,ignore.case=T))>0){#
      unit = gsub("([a-z])(\\d+)","\\1",granularity,ignore.case=T)#
      num = as.integer(gsub("([a-z])(\\d+)","\\1",granularity,ignore.case=T))#
      switch(unit, H={#
          periods=8760/num#
          print(paste("here1",periods))#
      }, M={#
          periods=525600/num#
          print(paste("here2",periods))#
      })#
      if(unit=="M" & (is.na(num)|is.null(num))){#
        periods = 12#
      }#
    }#
    print(paste("here",periods))#
    metricData <- as.matrix(metricFunction(returns,scale=periods))#
  }else{#
    metricData <- as.matrix(metricFunction(returns))#
  }#
  #Some functions return the data the wrong way round#
  #Hence cant label columns to need to check and transpose it#
  if(nrow(metricData) == 1){#
  metricData <- t(metricData)#
  }#
  colnames(metricData) <- metric#
  return (metricData)#
}
trainStrategy(data=out,strategy="EMA")
CalculatePerformanceMetric <- function(returns,metric){#
  #Get given some returns in columns#
  #Apply the function metric to the data#
  print (paste("Calculating Performance Metric:",metric))#
  metricFunction <- match.fun(metric)#
  if(length(grep("sharperatio",metric,ignore.case=T))>0){#
    periods = 252#
#
    if(length(grep("[a-z]\\d+",granularity,ignore.case=T))>0){#
      unit = gsub("([a-z])(\\d+)","\\1",granularity,ignore.case=T)#
      num = as.integer(gsub("([a-z])(\\d+)","\\1",granularity,ignore.case=T))#
      switch(unit, H={#
          periods=8760/num#
          print(paste("here1",num))#
      }, M={#
          periods=525600/num#
          print(paste("here2",periods))#
      })#
      if(unit=="M" & (is.na(num)|is.null(num))){#
        periods = 12#
      }#
    }#
    print(paste("here",periods))#
    metricData <- as.matrix(metricFunction(returns,scale=periods))#
  }else{#
    metricData <- as.matrix(metricFunction(returns))#
  }#
  #Some functions return the data the wrong way round#
  #Hence cant label columns to need to check and transpose it#
  if(nrow(metricData) == 1){#
  metricData <- t(metricData)#
  }#
  colnames(metricData) <- metric#
  return (metricData)#
}
trainStrategy(data=out,strategy="EMA")
CalculatePerformanceMetric <- function(returns,metric){#
  #Get given some returns in columns#
  #Apply the function metric to the data#
  print (paste("Calculating Performance Metric:",metric))#
  metricFunction <- match.fun(metric)#
  if(length(grep("sharperatio",metric,ignore.case=T))>0){#
    periods = 252#
#
    if(length(grep("[a-z]\\d+",granularity,ignore.case=T))>0){#
      unit = gsub("([a-z])(\\d+)","\\1",granularity,ignore.case=T)#
      num = as.integer(gsub("([a-z])(\\d+)","\\2",granularity,ignore.case=T))#
      switch(unit, H={#
          periods=8760/num#
          print(paste("here1",num))#
      }, M={#
          periods=525600/num#
          print(paste("here2",periods))#
      })#
      if(unit=="M" & (is.na(num)|is.null(num))){#
        periods = 12#
      }#
    }#
    print(paste("here",periods))#
    metricData <- as.matrix(metricFunction(returns,scale=periods))#
  }else{#
    metricData <- as.matrix(metricFunction(returns))#
  }#
  #Some functions return the data the wrong way round#
  #Hence cant label columns to need to check and transpose it#
  if(nrow(metricData) == 1){#
  metricData <- t(metricData)#
  }#
  colnames(metricData) <- metric#
  return (metricData)#
}
trainStrategy(data=out,strategy="EMA")
TradingStrategy <- function(strategy, data,param1=NA,param2=NA,param3=NA){#
  tradingreturns = NULL#
  returns = CalculateReturns(Cl(data))#
  runName = NULL#
  signal = 0#
#
  switch(strategy, CCI={#
    cci <- CCI(HLC(data),n=param1)#
    signal <- apply(cci,1,function (x) {if(is.na(x["cci"])){ return (0) } else { if(x["cci"]>100){return (1)} else if(x["cci"]<(-100)) {return (-1)}else{ return(0)}}})#
  }, MACD={#
    macd <- MACD(Cl(data),param1,param2,param3,maType=list(list(EMA),list(EMA),list(SMA)))#
    signal <- apply(macd,1,function (x) { if(is.na(x["macd"]) | is.na(x["signal"])){ return (0) } else { if(x["macd"]>0 & x["signal"]>0){return (1)} else if(x["macd"]<0 & x["signal"]<0) {return (-1)}else{ return(0)}}})#
  }, EMA={#
    ema1 <- EMA(Cl(data),param1)#
    ema2 <- EMA(Cl(data),param2)#
    emas <- ema1 / ema2#
    print(emas)#
    signal <- apply(emas,1,function (x) { if(is.na(x)){ return (0) } else { if(x>1){return (1)} else {return (-1)}}})#
  })#
#
  runName <- paste(strategy,param1,param2,param3,sep=",")#
  tradingreturns = signal * returns#
  colnames(tradingreturns) <- runName#
  print(paste("Running Strategy: ",runName))#
#
  return (tradingreturns)#
}
trainStrategy(data=out,strategy="EMA")
0.99/1
1.099/1.11/0.99
0.999/1.11/0.99
TradingStrategy <- function(strategy, data,param1=NA,param2=NA,param3=NA){#
  tradingreturns = NULL#
  returns = CalculateReturns(Cl(data))#
  runName = NULL#
  signal = 0#
#
  switch(strategy, CCI={#
    cci <- CCI(HLC(data),n=param1)#
    signal <- apply(cci,1,function (x) {if(is.na(x["cci"])){ return (0) } else { if(x["cci"]>100){return (1)} else if(x["cci"]<(-100)) {return (-1)}else{ return(0)}}})#
  }, MACD={#
    macd <- MACD(Cl(data),param1,param2,param3,maType=list(list(EMA),list(EMA),list(SMA)))#
    signal <- apply(macd,1,function (x) { if(is.na(x["macd"]) | is.na(x["signal"])){ return (0) } else { if(x["macd"]>0 & x["signal"]>0){return (1)} else if(x["macd"]<0 & x["signal"]<0) {return (-1)}else{ return(0)}}})#
  }, EMA={#
    ema1 <- EMA(Cl(data),param1)#
    ema2 <- EMA(Cl(data),param2)#
    emas <- ema1 / ema2#
    signal <- apply(emas,1,function (x) { if(is.na(x)){ return (0) } else { if(x>1){return (1)} else {return (-1)}}})#
  })#
#
  runName <- paste(strategy,param1,param2,param3,sep=",")#
  tradingreturns = signal * returns#
  colnames(tradingreturns) <- runName#
  print(paste("Running Strategy: ",runName))#
#
  return (tradingreturns)#
}
trainStrategy(data=out,strategy="EMA")
TradingStrategy <- function(strategy, data,param1=NA,param2=NA,param3=NA){#
  tradingreturns = NULL#
  returns = CalculateReturns(Cl(data))#
  runName = NULL#
  signal = 0#
#
  switch(strategy, CCI={#
    cci <- CCI(HLC(data),n=param1)#
    signal <- apply(cci,1,function (x) {if(is.na(x["cci"])){ return (0) } else { if(x["cci"]>100){return (1)} else if(x["cci"]<(-100)) {return (-1)}else{ return(0)}}})#
  }, MACD={#
    macd <- MACD(Cl(data),param1,param2,param3,maType=list(list(EMA),list(EMA),list(SMA)))#
    signal <- apply(macd,1,function (x) { if(is.na(x["macd"]) | is.na(x["signal"])){ return (0) } else { if(x["macd"]>0 & x["signal"]>0){return (1)} else if(x["macd"]<0 & x["signal"]<0) {return (-1)}else{ return(0)}}})#
  }, EMA={#
    ema1 <- EMA(Cl(data),param1)#
    ema2 <- EMA(Cl(data),param2)#
    emas <- ema1 / ema2#
    signal <- apply(emas,1,function (x) { if(is.na(x)){ return (0) } else { if(x>1){return (1)} else {return (-1)}}})#
    print(signal)#
  })#
#
  runName <- paste(strategy,param1,param2,param3,sep=",")#
  tradingreturns = signal * returns#
  colnames(tradingreturns) <- runName#
  print(paste("Running Strategy: ",runName))#
#
  return (tradingreturns)#
}
trainStrategy(data=out,strategy="EMA")
trainStrategy(data=out,strategy="CCI")
CalculateReturns(Cl(out))
cbind(CalculateReturns(Cl(out)),((Cl(out)/Op(out))-1))
TradingStrategy <- function(strategy, data,param1=NA,param2=NA,param3=NA){#
  tradingreturns = NULL#
  returns = (Cl(data)/Op(data))-1#
  runName = NULL#
  signal = 0#
#
  switch(strategy, CCI={#
    cci <- CCI(HLC(data),n=param1)#
    signal <- apply(cci,1,function (x) {if(is.na(x["cci"])){ return (0) } else { if(x["cci"]>100){return (1)} else if(x["cci"]<(-100)) {return (-1)}else{ return(0)}}})#
  }, MACD={#
    macd <- MACD(Cl(data),param1,param2,param3,maType=list(list(EMA),list(EMA),list(SMA)))#
    signal <- apply(macd,1,function (x) { if(is.na(x["macd"]) | is.na(x["signal"])){ return (0) } else { if(x["macd"]>0 & x["signal"]>0){return (1)} else if(x["macd"]<0 & x["signal"]<0) {return (-1)}else{ return(0)}}})#
  }, EMA={#
    ema1 <- EMA(Cl(data),param1)#
    ema2 <- EMA(Cl(data),param2)#
    emas <- ema1 / ema2#
    signal <- apply(emas,1,function (x) { if(is.na(x)){ return (0) } else { if(x>1){return (1)} else {return (-1)}}})#
    print(signal)#
  })#
#
  runName <- paste(strategy,param1,param2,param3,sep=",")#
  tradingreturns = signal * returns#
  colnames(tradingreturns) <- runName#
  print(paste("Running Strategy: ",runName))#
#
  return (tradingreturns)#
}
trainStrategy(data=out,strategy="CCI")
trainStrategy(data=out,strategy="CCI")
TradingStrategy <- function(strategy, data,param1=NA,param2=NA,param3=NA){#
  tradingreturns = NULL#
  returns = CalculateReturns(Cl(data))#
  runName = NULL#
  signal = 0#
#
  switch(strategy, CCI={#
    cci <- CCI(HLC(data),n=param1)#
    signal <- apply(cci,1,function (x) {if(is.na(x["cci"])){ return (0) } else { if(x["cci"]>100){return (1)} else if(x["cci"]<(-100)) {return (-1)}else{ return(0)}}})#
  }, MACD={#
    macd <- MACD(Cl(data),param1,param2,param3,maType=list(list(EMA),list(EMA),list(SMA)))#
    signal <- apply(macd,1,function (x) { if(is.na(x["macd"]) | is.na(x["signal"])){ return (0) } else { if(x["macd"]>0 & x["signal"]>0){return (1)} else if(x["macd"]<0 & x["signal"]<0) {return (-1)}else{ return(0)}}})#
  }, EMA={#
    ema1 <- EMA(Cl(data),param1)#
    ema2 <- EMA(Cl(data),param2)#
    emas <- ema1 / ema2#
    signal <- apply(emas,1,function (x) { if(is.na(x)){ return (0) } else { if(x>1){return (1)} else {return (-1)}}})#
    print(signal)#
  })#
#
  runName <- paste(strategy,param1,param2,param3,sep=",")#
  tradingreturns = signal * returns#
  colnames(tradingreturns) <- runName#
  print(paste("Running Strategy: ",runName))#
#
  return (tradingreturns)#
}
trainStrategy(data=out,strategy="CCI")
TradingStrategy <- function(strategy, data,param1=NA,param2=NA,param3=NA){#
  tradingreturns = NULL#
  returns = (Cl(data)/Op(data))-1#
  runName = NULL#
  signal = 0#
#
  switch(strategy, CCI={#
    cci <- CCI(HLC(data),n=param1)#
    signal <- apply(cci,1,function (x) {if(is.na(x["cci"])){ return (0) } else { if(x["cci"]>100){return (1)} else if(x["cci"]<(-100)) {return (-1)}else{ return(0)}}})#
  }, MACD={#
    macd <- MACD(Cl(data),param1,param2,param3,maType=list(list(EMA),list(EMA),list(SMA)))#
    signal <- apply(macd,1,function (x) { if(is.na(x["macd"]) | is.na(x["signal"])){ return (0) } else { if(x["macd"]>0 & x["signal"]>0){return (1)} else if(x["macd"]<0 & x["signal"]<0) {return (-1)}else{ return(0)}}})#
  }, EMA={#
    ema1 <- EMA(Cl(data),param1)#
    ema2 <- EMA(Cl(data),param2)#
    emas <- ema1 / ema2#
    signal <- apply(emas,1,function (x) { if(is.na(x)){ return (0) } else { if(x>1){return (1)} else {return (-1)}}})#
    print(signal)#
  })#
#
  runName <- paste(strategy,param1,param2,param3,sep=",")#
  tradingreturns = signal * returns#
  colnames(tradingreturns) <- runName#
  print(paste("Running Strategy: ",runName))#
#
  return (tradingreturns)#
}
trainStrategy(data=out,strategy="EMA")
TradingStrategy <- function(strategy, data,param1=NA,param2=NA,param3=NA){#
  tradingreturns = NULL#
  returns = (Cl(data)/Op(data))-1#
  runName = NULL#
  signal = 0#
#
  switch(strategy, CCI={#
    cci <- CCI(HLC(data),n=param1)#
    signal <- apply(cci,1,function (x) {if(is.na(x["cci"])){ return (0) } else { if(x["cci"]>100){return (1)} else if(x["cci"]<(-100)) {return (-1)}else{ return(0)}}})#
  }, MACD={#
    macd <- MACD(Cl(data),param1,param2,param3,maType=list(list(EMA),list(EMA),list(SMA)))#
    signal <- apply(macd,1,function (x) { if(is.na(x["macd"]) | is.na(x["signal"])){ return (0) } else { if(x["macd"]>0 & x["signal"]>0){return (1)} else if(x["macd"]<0 & x["signal"]<0) {return (-1)}else{ return(0)}}})#
  }, EMA={#
    ema1 <- EMA(Cl(data),param1)#
    ema2 <- EMA(Cl(data),param2)#
    emas <- ema1 / ema2#
    signal <- apply(emas,1,function (x) { print(x); if(is.na(x)){ return (0) } else { if(x>1){return (1)} else {return (-1)}}})#
  })#
#
  runName <- paste(strategy,param1,param2,param3,sep=",")#
  tradingreturns = signal * returns#
  colnames(tradingreturns) <- runName#
  print(paste("Running Strategy: ",runName))#
#
  return (tradingreturns)#
}
trainStrategy(data=out,strategy="EMA")
TradingStrategy <- function(strategy, data,param1=NA,param2=NA,param3=NA){#
  tradingreturns = NULL#
  returns = (Cl(data)/Op(data))-1#
  runName = NULL#
  signal = 0#
#
  switch(strategy, CCI={#
    cci <- CCI(HLC(data),n=param1)#
    signal <- apply(cci,1,function (x) {if(is.na(x["cci"])){ return (0) } else { if(x["cci"]>100){return (1)} else if(x["cci"]<(-100)) {return (-1)}else{ return(0)}}})#
  }, MACD={#
    macd <- MACD(Cl(data),param1,param2,param3,maType=list(list(EMA),list(EMA),list(SMA)))#
    signal <- apply(macd,1,function (x) { if(is.na(x["macd"]) | is.na(x["signal"])){ return (0) } else { if(x["macd"]>0 & x["signal"]>0){return (1)} else if(x["macd"]<0 & x["signal"]<0) {return (-1)}else{ return(0)}}})#
  }, EMA={#
    ema1 <- SMA(Cl(data),param1)#
    ema2 <- SMA(Cl(data),param2)#
    emas <- ema1 / ema2#
    signal <- apply(emas,1,function (x) {if(is.na(x)){ return (0) } else { if(x>1){return (1)} else {return (-1)}}})#
  })#
#
  runName <- paste(strategy,param1,param2,param3,sep=",")#
  tradingreturns = signal * returns#
  colnames(tradingreturns) <- runName#
  print(paste("Running Strategy: ",runName))#
#
  return (tradingreturns)#
}
trainStrategy(data=out,strategy="EMA")
TradingStrategy <- function(strategy, data,param1=NA,param2=NA,param3=NA){#
  tradingreturns = NULL#
  returns = (Cl(data)/Op(data))-1#
  runName = NULL#
  signal = 0#
#
  switch(strategy, CCI={#
    cci <- CCI(HLC(data),n=param1)#
    signal <- apply(cci,1,function (x) {if(is.na(x["cci"])){ return (0) } else { if(x["cci"]>100){return (1)} else if(x["cci"]<(-100)) {return (-1)}else{ return(0)}}})#
  }, MACD={#
    macd <- MACD(Cl(data),nFast=param1,nSlow=param2,nSig=param3,maType=list(list(EMA),list(EMA),list(SMA)))#
    signal <- apply(macd,1,function (x) { if(is.na(x["macd"]) | is.na(x["signal"])){ return (0) } else { if(x["macd"]>0 & x["signal"]>0){return (1)} else if(x["macd"]<0 & x["signal"]<0) {return (-1)}else{ return(0)}}})#
  }, EMA={#
    ema1 <- SMA(Op(data),n=param1)#
    ema2 <- SMA(Op(data),n=param2)#
    emas <- ema1 / ema2#
    signal <- apply(emas,1,function (x) {if(is.na(x)){ return (0) } else { if(x>1){return (1)} else {return (-1)}}})#
  })#
#
  runName <- paste(strategy,param1,param2,param3,sep=",")#
  tradingreturns = signal * returns#
  colnames(tradingreturns) <- runName#
  print(paste("Running Strategy: ",runName))#
#
  return (tradingreturns)#
}
trainStrategy(data=out,strategy="EMA")
TradingStrategy <- function(strategy, data,param1=NA,param2=NA,param3=NA){#
  tradingreturns = NULL#
  returns = (Cl(data)/Op(data))-1#
  runName = NULL#
  signal = 0#
#
  switch(strategy, CCI={#
    cci <- CCI(HLC(data),n=param1)#
    signal <- apply(cci,1,function (x) {if(is.na(x["cci"])){ return (0) } else { if(x["cci"]>100){return (1)} else if(x["cci"]<(-100)) {return (-1)}else{ return(0)}}})#
  }, MACD={#
    macd <- MACD(Op(data),nFast=param1,nSlow=param2,nSig=param3,maType=list(list(EMA),list(EMA),list(SMA)))#
    signal <- apply(macd,1,function (x) { if(is.na(x["macd"]) | is.na(x["signal"])){ return (0) } else { if(x["macd"]>0 & x["signal"]>0){return (1)} else if(x["macd"]<0 & x["signal"]<0) {return (-1)}else{ return(0)}}})#
  }, EMA={#
    ema1 <- EMA(Op(data),n=param1)#
    ema2 <- EMA(Op(data),n=param2)#
    emas <- ema1 / ema2#
    signal <- apply(emas,1,function (x) {if(is.na(x)){ return (0) } else { if(x>1){return (1)} else {return (-1)}}})#
  })#
#
  runName <- paste(strategy,param1,param2,param3,sep=",")#
  tradingreturns = signal * returns#
  colnames(tradingreturns) <- runName#
  print(paste("Running Strategy: ",runName))#
#
  return (tradingreturns)#
}
trainStrategy(data=out,strategy="EMA")
trainStrategy(data=out,strategy="MACD")
trainStrategy(data=out,strategy="EMA")
trainStrategy(data=out,strategy="CCI")
?CCI
TradingStrategy <- function(strategy, data,param1=NA,param2=NA,param3=NA){#
  tradingreturns = NULL#
  returns = (Cl(data)/Op(data))-1#
  runName = NULL#
  signal = 0#
#
  switch(strategy, CCI={#
    cci <- CCI(Op(data),n=param1)#
    signal <- apply(cci,1,function (x) {if(is.na(x["cci"])){ return (0) } else { if(x["cci"]>100){return (1)} else if(x["cci"]<(-100)) {return (-1)}else{ return(0)}}})#
  }, MACD={#
    macd <- MACD(Op(data),nFast=param1,nSlow=param2,nSig=param3,maType=list(list(EMA),list(EMA),list(SMA)))#
    signal <- apply(macd,1,function (x) { if(is.na(x["macd"]) | is.na(x["signal"])){ return (0) } else { if(x["macd"]>0 & x["signal"]>0){return (1)} else if(x["macd"]<0 & x["signal"]<0) {return (-1)}else{ return(0)}}})#
  }, EMA={#
    ema1 <- EMA(Op(data),n=param1)#
    ema2 <- EMA(Op(data),n=param2)#
    emas <- ema1 / ema2#
    signal <- apply(emas,1,function (x) {if(is.na(x)){ return (0) } else { if(x>1){return (1)} else {return (-1)}}})#
  })#
#
  runName <- paste(strategy,param1,param2,param3,sep=",")#
  tradingreturns = signal * returns#
  colnames(tradingreturns) <- runName#
  print(paste("Running Strategy: ",runName))#
#
  return (tradingreturns)#
}
trainStrategy(data=out,strategy="CCI")
?MACD
TradingStrategy <- function(strategy, data,param1=NA,param2=NA,param3=NA){#
  tradingreturns = NULL#
  returns = (Cl(data)/Op(data))-1#
  runName = NULL#
  signal = 0#
#
  switch(strategy, CCI={#
    cci <- CCI(Op(data),n=param1)#
    signal <- apply(cci,1,function (x) {if(is.na(x["cci"])){ return (0) } else { if(x["cci"]>100){return (1)} else if(x["cci"]<(-100)) {return (-1)}else{ return(0)}}})#
  }, MACD={#
    macd <- MACD(OHLC(data),nFast=param1,nSlow=param2,nSig=param3,maType=list(list(EMA),list(EMA),list(SMA)))#
    signal <- apply(macd,1,function (x) { if(is.na(x["macd"]) | is.na(x["signal"])){ return (0) } else { if(x["macd"]>0 & x["signal"]>0){return (1)} else if(x["macd"]<0 & x["signal"]<0) {return (-1)}else{ return(0)}}})#
  }, EMA={#
    ema1 <- EMA(Op(data),n=param1)#
    ema2 <- EMA(Op(data),n=param2)#
    emas <- ema1 / ema2#
    signal <- apply(emas,1,function (x) {if(is.na(x)){ return (0) } else { if(x>1){return (1)} else {return (-1)}}})#
  })#
#
  runName <- paste(strategy,param1,param2,param3,sep=",")#
  tradingreturns = signal * returns#
  colnames(tradingreturns) <- runName#
  print(paste("Running Strategy: ",runName))#
#
  return (tradingreturns)#
}
trainStrategy(data=out,strategy="MACD")
TradingStrategy <- function(strategy, data,param1=NA,param2=NA,param3=NA){#
  tradingreturns = NULL#
  returns = (Cl(data)/Op(data))-1#
  runName = NULL#
  signal = 0#
#
  switch(strategy, CCI={#
    cci <- CCI(Op(data),n=param1)#
    signal <- apply(cci,1,function (x) {if(is.na(x["cci"])){ return (0) } else { if(x["cci"]>100){return (1)} else if(x["cci"]<(-100)) {return (-1)}else{ return(0)}}})#
  }, MACD={#
    macd <- MACD(Op(data),nFast=param1,nSlow=param2,nSig=param3,maType=list(list(EMA),list(EMA),list(SMA)))#
    signal <- apply(macd,1,function (x) { if(is.na(x["macd"]) | is.na(x["signal"])){ return (0) } else { if(x["macd"]>0 & x["signal"]>0){return (1)} else if(x["macd"]<0 & x["signal"]<0) {return (-1)}else{ return(0)}}})#
  }, EMA={#
    ema1 <- EMA(Op(data),n=param1)#
    ema2 <- EMA(Op(data),n=param2)#
    emas <- ema1 / ema2#
    signal <- apply(emas,1,function (x) {if(is.na(x)){ return (0) } else { if(x>1){return (1)} else {return (-1)}}})#
  })#
#
  runName <- paste(strategy,param1,param2,param3,sep=",")#
  tradingreturns = signal * returns#
  colnames(tradingreturns) <- runName#
  print(paste("Running Strategy: ",runName))#
#
  return (tradingreturns)#
}
trainStrategy(data=out,strategy="MACD")
instrument
MACD(Op(data),nFast=12,nSlow=4,nSig=7,maType=list(list(EMA),list(EMA),list(SMA)))
MACD(Op(out),nFast=12,nSlow=4,nSig=7,maType=list(list(EMA),list(EMA),list(SMA)))
testStrategy <- function(data, instrument,strategy,param1=NA,param2=NA,param3=NA){#
  #sampleStartDate = index(data[ceiling(nrow(data)/2)+1,])#
  sampleStartDate = index(data[1,])#
  testData <- window(data, start = sampleStartDate)#
  indexReturns <- Delt(Cl(window(data, start = sampleStartDate)))#
  colnames(indexReturns) <- paste(instrument, "Buy&Hold",sep=" ")#
  dataOfSampleReturns <- TradingStrategy(strategy,testData,param1=param1,param2=param2,param3=param3)#
  finalReturns <- cbind(dataOfSampleReturns,indexReturns)#
#
  dev.new()#
  charts.PerformanceSummary(finalReturns,main=paste(strategy,"- data of Sample"),geometric=FALSE)#
}
testStrategy(out,instrument,"MACD",4,12,7)
testStrategy(out,instrument,"MACD",12,4,7)
testStrategy(out,instrument,"MACD",12,4,7)
testStrategy(out,instrument,"MACD",4,12,7)
testStrategy(out,instrument,"MACD",12,4,7)
getSignals(out)
StructTS
TradingStrategy("CCI",out,param1=12)
getSignals(out)
